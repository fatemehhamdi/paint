# 🎨 نقاشی بکش لوئی (Paint Loui)

یک وب‌اپلیکیشن نقاشی تعاملی ساخته شده با React.js که امکان کشیدن اشکال هندسی، نقاشی با مداد، و ذخیره‌سازی نقاشی‌ها را فراهم می‌کند.

## ✨ ویژگی‌های اصلی

- **اشکال هندسی**: دایره، مربع، مثلث با امکان تغییر سایز
- **نقاشی آزاد**: ابزار مداد برای کشیدن خطوط منحنی
- **حذف انتخابی**: دابل کلیک روی هر شکل برای پاک کردن
- **صادر و وارد کردن**: ذخیره نقاشی‌ها به فرمت JSON
- **پیش‌نمایش زنده**: نمایش شکل حین کشیدن

## 🏗️ معماری کامپوننت‌ها

### App.jsx - مدیریت کلی
قلب اپلیکیشن که تمام state های اصلی را نگهداری می‌کند:
- **وضعیت اشکال**: آرایه‌ای از تمام اشکال کشیده شده
- **ابزار انتخابی**: نگهداری ابزار فعال
- **عنوان نقاشی**: قابل ویرایش توسط کاربر
- **عملیات فایل**: export و import با پردازش JSON

### Canvas.jsx - محیط نقاشی
کامپوننت اصلی که تعامل کاربر با ماوس را مدیریت می‌کند:

#### نحوه کارکرد:
1. **MouseDown**: شروع کشیدن - ثبت نقطه آغاز و ایجاد شکل موقت
2. **MouseMove**: حین کشیدن - بروزرسانی سایز یا مسیر بر اساس حرکت ماوس
3. **MouseUp**: پایان کشیدن - تبدیل شکل موقت به شکل دائمی

#### تفاوت عملکرد:
- **اشکال هندسی**: محاسبه سایز بر اساس فاصله drag
- **مداد**: ایجاد مسیر SVG از نقاط عبوری ماوس

### Shape.jsx - رندر اشکال
هر شکل با روش متفاوتی نمایش داده می‌شود:
- **دایره**: div با border-radius 50%
- **مربع**: div ساده با background
- **مثلث**: تکنیک CSS border برای شکل‌گیری
- **مداد**: SVG path برای نمایش خطوط منحنی

#### سیستم حذف:
- رویداد دابل کلیک مخصوص هر شکل
- جلوگیری از تداخل events بین اشکال مختلف

### Sidebar.jsx - انتخاب ابزار  
نوار کناری شامل:
- آیکن‌های تعاملی برای هر ابزار
- نمایش visual feedback برای ابزار انتخابی
- تغییر cursor canvas بر اساس ابزار

### StatusBar.jsx - نمایش آمار
نوار پایینی که اطلاعات لحظه‌ای نمایش می‌دهد:
- تعداد هر نوع شکل کشیده شده
- آمار کلی نقاشی فعال

### Header.jsx - مدیریت فایل
شامل عملیات اصلی:
- **عنوان قابل ویرایش**: کلیک برای تغییر نام
- **Export**: تبدیل state به JSON و دانلود
- **Import**: آپلود فایل JSON و جایگزینی کامل state

## 🔄 جریان کار (Workflow)

### کشیدن شکل هندسی:
1. انتخاب ابزار از Sidebar
2. کلیک و drag روی Canvas
3. نمایش پیش‌نمایش با opacity کمتر
4. رها کردن ماوس → تثبیت شکل

### نقاشی با مداد:
1. انتخاب ابزار Pencil
2. شروع drag → ایجاد path جدید
3. حین حرکت → افزودن نقاط به path
4. پایان → تبدیل به SVG element

### مدیریت فایل:
- **Export**: ایجاد object شامل title، shapes، timestamp
- **Import**: parse کردن JSON، اعتبارسنجی، و جایگزینی state
- **عنوان**: inline editing با focus/blur events

## ⚡ نکات فنی مهم

### مدیریت Events
- استفاده از `getBoundingClientRect` برای محاسبه دقیق مختصات
- `stopPropagation` برای جلوگیری از تداخل events
- تفکیک pointer events برای SVG و اشکال هندسی

### بهینه‌سازی Performance  
- استفاده از functional updates در setState
- Unique ID برای هر شکل جهت efficient re-rendering
- Memory management برای Object URLs

### UX Enhancements
- تغییر cursor بر اساس ابزار انتخابی
- شکل‌های موقت با opacity و border متفاوت
- Reset فیلد input بعد از import برای امکان وارد کردن مجدد

## 🎨 طراحی رنگ‌ها

- **آبی**: دایره‌ها (#007bff)
- **سبز**: مربع‌ها (#28a745)  
- **زرد**: مثلث‌ها (#ffc107)
- **بنفش**: خطوط مداد (#6f42c1)

## 🐛 مسائل حل شده

### تداخل Event Handling
SVG مداد در ابتدا تمام کلیک‌ها را می‌گرفت. با تنظیم `pointer-events` به صورت هوشمند، فقط کلیک روی خط واقعی detect می‌شود.

### Positioning دقیق
تغییر از corner-based به center-based positioning برای نمایش طبیعی‌تر اشکال.

### مدیریت State
جایگزینی کامل state هنگام import به جای merge کردن، برای تجربه کاربری بهتر.

## 🤖 همکاری با هوش مصنوعی

برای بهبود performance، بهینه‌سازی ساختار کد، و رفع مشکلات فنی از هوش مصنوعی Claude استفاده شده است. این همکاری شامل بهبود event handling، optimization در React، و debugging مسائل پیچیده بوده است.


